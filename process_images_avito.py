#!/usr/bin/env python3

"""
Author: Polyakov Konstantin
Date: 2018-12-26
Place: Yeysk, Russia
"""

import io
import os
import base64
import cv2
import numpy as np

import config_site_avito as cs
import parser_tools as pt

# https://habr.com/company/oleg-bunin/blog/425471/
# installing: https://www.asozykin.ru/computer_vision/2017/12/08/How-to-Install-OpenCV-in-Python.html
# https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html

from PIL import Image, ImageDraw 

templates = {
'1111111111111111100000000011111\n1111000000001111000000000000111\n1100000000000110000000000000011\n1000000000000100000000000000001\n1000000000000000000000000000001\n0000000000000000001111111000000\n0000001111000000011111111100000\n0000011111100000011111111100000\n0000011111100000011111111100000\n0000011111100000011111111100000\n0000011111100000011111111100000\n0000011111100000011111111100000\n0000011111100000011111111100000\n0000001111000000001111111100000\n0000000000000000000111111000000\n1000000000000000000000000000001\n1100000000000100000000000000001\n1100000000000110000000000000011\n1111000000001111000000000000111\n1111111111111111100000000011111':'8',
'1111100000000001111111111111111\n1110000000000000011111100001111\n1100000000000000001111100000111\n1000000000000000000111100000001\n1000000000000000000111100000001\n0000000111111000000011100000000\n0000001111111100000011111000000\n0000011111111110000011111100000\n0000011111111110000011111100000\n0000011111111110000011111100000\n0000011111111110000011111100000\n0000011111111110000011111100000\n0000011111111110000011111100000\n0000001111111100000111111000000\n1000000111111000001111100000001\n1000000000000000000000000000001\n1100000000000000000000000000011\n1110000000000000000000000000111\n1111000000000000000000000011111\n1111111000000000000000011111111':'9',
'1111111000001111111111111111111\n1111110000011111111111111111111\n1111110000011111111111111111111\n1111100000111111111111111111111\n1111000000111111111111111111111\n1110000001111111111111111111111\n1100000011111111111111111111111\n0000000000000000000000000000000\n0000000000000000000000000000000\n0000000000000000000000000000000\n0000000000000000000000000000000':'1',
'1111111100000000000000001111111\n1111100000000000000000000011111\n1111000000000000000000000000111\n1100000000000000000000000000011\n1100000000000000000000000000001\n1000000001111000001111110000001\n0000000111110000011111111000000\n0000001111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000001111100000011111111000000\n0000000011100000001111110000000\n1000000011110000000000000000001\n1100000011110000000000000000001\n1110000011111000000000000000011\n1111000011111100000000000001111\n1111111111111111000000000011111':'6',
'1111100001111111111110000011111\n1110000001111111111110000000111\n1100000001111111111110000000011\n1000000001111111111110000000001\n1000000001111111111110000000001\n0000000111111111111111110000000\n0000011111111111111111111000000\n0000011111110000111111111100000\n0000011111110000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000011111100000111111111100000\n0000001111000000011111111100000\n0000000000000000011111111000000\n1000000000000000001111110000000\n1100000000000000000000000000001\n1100000000001100000000000000011\n1111000000011110000000000000011\n1111111111111111000000000001111\n1111111111111111100000000011111':'3',
'1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111\n1111111111111111110000111111111':'-',
'0000111111111111111111111111111\n0000111111111111111111111111111\n0000111111111111111111111111111\n0000111111111111111111111111111\n0000111111111111111111111111111\n0000111111111111111111110000000\n0000111111111111111100000000000\n0000111111111111100000000000000\n0000111111111110000000000000000\n0000111111111000000000000000000\n0000111111100000000000001111111\n0000111110000000000011111111111\n0000111100000000001111111111111\n0000110000000001111111111111111\n0000100000000111111111111111111\n0000000000011111111111111111111\n0000000001111111111111111111111\n0000000011111111111111111111111\n0000001111111111111111111111111\n0000011111111111111111111111111':'7',
'1111111111111111110000001111111\n1111111111111111100000001111111\n1111111111111110000000001111111\n1111111111111100000000001111111\n1111111111111000000000001111111\n1111111111100000000000001111111\n1111111111000000001100001111111\n1111111100000000011100001111111\n1111111000000000111100001111111\n1111100000000011111100001111111\n1111000000000111111100001111111\n1110000000011111111100001111111\n1000000000111111111100001111111\n0000000000000000000000000000000\n0000000000000000000000000000000\n0000000000000000000000000000000\n0000000000000000000000000000000\n1111111111111111111100001111111\n1111111111111111111100001111111\n1111111111111111111100001111111\n1111111111111111111100001111111':'4',
'1111111111111111111111000011111\n1111111111100000011111000000111\n1111100000000000011111000000011\n0000000000000000011111000000001\n0000000000000000011111000000001\n0000000000000000011111111000000\n0000000000000000111111111100000\n0000001111000001111111111100000\n0000111111000001111111111100000\n0000111111000001111111111100000\n0000111111000001111111111100000\n0000111111000001111111111100000\n0000111111000001111111111100000\n0000111111000001111111111000000\n0000111111000000111111110000000\n0000111111100000000000000000001\n0000111111100000000000000000011\n0000111111110000000000000000111\n1111111111111000000000000001111\n1111111111111110000000000111111':'5',
'1111111000000000000000001111111\n1111000000000000000000000001111\n1110000000000000000000000000011\n1100000000000000000000000000001\n1000000000000001000000000000001\n0000000011111111111111100000000\n0000001111111111111111111000000\n0000011111111111111111111100000\n0000011111111111111111111100000\n0000011111111111111111111100000\n0000011111111111111111111100000\n0000011111111111111111111100000\n0000011111111111111111111100000\n0000001111111111111111111000000\n0000000011111111111111100000000\n1000000000000001000000000000001\n1100000000000000000000000000011\n1110000000000000000000000000111\n1111000000000000000000000001111\n1111111000000000000000001111111':'0',
'1111111111111111111111111110000\n1111100000111111111111111000000\n1110000000111111111111110000000\n1100000000111111111111100000000\n1000000000111111111111000000000\n1000000000111111111110000000000\n0000000111111111111100000000000\n0000001111111111111000000010000\n0000011111111111111000000110000\n0000011111111111110000001110000\n0000011111111111100000011110000\n0000011111111111000000111110000\n0000011111111110000000111110000\n0000011111111100000001111110000\n0000001111111000000011111110000\n0000001111110000000111111110000\n1000000000000000001111111110000\n1000000000000000011111111110000\n1100000000000000111111111110000\n1110000000000001111111111110000\n1111000000000111111111111110000':'2'
}

class NN():

    def __init__(self):
        pass
        
    def study(self):
        pass
        
    def recognize(self):
        pass

class ImagePhoneProcessor():
	
    def __init__(self, base64):
        self.base64 = base64
        self.bin = None
        self.figures = []
        self.phone = ''

    def base2bin(self, path_to_save=None):
        self.bin = base64.b64decode(self.base64[22:])
        if path_to_save:
            with open(path_to_save, 'wb') as f: f.write(self.bin)

    def cut(self):

        nparr = np.frombuffer(self.bin, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_ANYCOLOR)
        img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

        
        #print(len(img[0]), len(img))

        # обрезаем верх и низ
        
        _img = []
        for row in img: # по столбам
            if 0 in row: _img.append(row)
        img = _img

        #print(len(img[0]), len(img))

        # разрезаем на цифры

        figures = []
        figure = []        
        for i in range(len(img[0])): # по столбам
            column = []
            for j in range(len(img)): # по строкам
                column.append(img[j][i])
            if 0 in column: figure.append(column)
            else:
                if figure: figures.append(figure)
                figure = []


        for f, figure in enumerate(figures):
            for i, row in enumerate(figure):
                for j, pixel in enumerate(row):
                    if pixel == 255: figures[f][i][j] = 1

        for a, figure in enumerate(figures):
            for i, row in enumerate(figure):
                #print(''.join([str(i) for i in row]))
                figures[a][i] = ''.join([str(i) for i in row]) 
            figures[a] = '\n'.join([str(i) for i in figure]) 

        #print(len(figures))

        #for figure in figures: print(figure)

        self.figures = figures
        
    def recognize(self):
        for figure in self.figures:
            self.phone += templates[figure]

        self.phone = self.phone.replace('-', '')
        self.phone = '+7' + self.phone[1:]
        
    def save(self, user_id, c, cu):
        sql_sel = "SELECT * FROM user_contact WHERE user_contact_user_id=? AND user_contact_data=?"
        sql_ins = "INSERT INTO user_contact (user_contact_user_id, user_contact_data, user_contact_type) VALUES (?, ?, ?)"

        res = cu.execute(sql_sel, (user_id, phone)).fetchall()
        if not res:
            res = cu.execute(sql_ins, (user_id, self.phone, 'phone'))
            c.commit()

    def do_all(self, user_id, c, cu):
        self.base2bin()
        self.cut()
        self.recognize()
        self.save(user_id, c, cu)

if __name__ == '__main__':

    path_bin = os.path.join(cs.path_data, 'images_sets')
    path_base = os.path.join(cs.path_data, 'images')

    figures = []

    # make image sets

    files = os.listdir(path_base)

    c, cu = cs.get_db()

    for i, f_name in enumerate(files):

        with open(path_base+'/'+f_name, 'r') as f: base = f.read()

        ipp = ImagePhoneProcessor(base)
        ipp.do_all(f_name.split('.')[0], c, cu)


    #with open('/root/parsers/data/figures.txt', 'w') as f: f.write(str(figures))
    #for figure in figures:
    #    print(figure)
    #    print()
    
    # study the nn